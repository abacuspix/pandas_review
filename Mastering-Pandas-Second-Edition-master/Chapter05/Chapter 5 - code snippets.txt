

# Creating series, dataframe and panel


ser = pd.Series(["Numpy", "Pandas", "Sklearn", "Tensorflow", "Scrapy", "Keras"], index = ["A", "B", "C", "D", "E", "F"])

df = pd.DataFrame(np.random.randn(6, 3), columns = ["colA", "colB", "colC"], index = ["R1", "R2", "R3", "R4", "R5", "R6"])

pan = pd.Panel({"Item1": df+1, "Item2": df, "Item3": df*2})


# Basic indexing in a series


ser["D"]


# Basic indexing in a series - with row index


ser[1]


# Basic indexing in a dataframe

df["colB"]


# Basic indexing in a dataframe specifying row and column


df["colB"]["R3"], df["colB"][1]


# Basic indexing in a panel


pan["Item1"]


# Basic indexing in a dataframe to select multiple columns


df[["colA", "colB"]]


# Subsetting non-existent column without raising exception


df.get("columnA", "NA")


# Creating a column with square brackets operator


df["colD"] = list(range(len(df)))
df


# Using dot operator to slice dataframe

df.colA


# Using dot operator to slice column followed by row 


df.colA.R3


# Range slicing in a series


ser[1:4]


# Range slicing in a dataframe - only end of range is specified


df[:2]


# Range slicing in a dataframe - only start of range is specified


df[2:]


# Range slicing to get odd numbered rows


df[::2]


# Range slicing to get even numbered rows


df[1::2]


# Range slicing to reverse the order of rows


df[::-1]


# Creating a series with default index


ser_loc1 = pd.Series(np.linspace(11,15, 5))



# Creating a series with custom index


ser_loc2 = pd.Series(np.linspace(11, 15, 5), index = list("abcde"))


# Using .loc operator - slice a series with integer based label


ser_loc1.loc[2]


# Using .loc operator - slice a series with single index


ser_loc2.loc["b"]


# Using .loc operator - slice a series with a list of integer based index


ser_loc1.loc[[1, 3, 4]]


# Using .loc operator - slice a series with a list of labels


ser_loc2.loc[["b", "c", "d"]]


# Using .loc operator - slice a series with a range of integer based index


ser_loc1.loc[1:4]


# Using .loc operator - slice a series with a range of label based index


ser_loc2.loc["b":"d"]


# Using .loc operator - slice a series with a boolean array


ser_loc1.loc[ser_loc1 > 13]


# In[120]: Create a dataframe with default index


df_loc1 = pd.DataFrame(np.linspace(1, 25, 25).reshape(5, 5), columns = ["Asia", "Europe", "Africa", "Americas", "Australia"])


# In[122]: Create a dataframe with custom index


df_loc2 = pd.DataFrame(np.linspace(1, 25, 25).reshape(5, 5), columns = ["Asia", "Europe", "Africa", "Americas", "Australia"], index = ["2011", "2012", "2013", "2014", "2015"])


# In[147]: Using .loc operator - select a single column from a dataframe


df_loc1.loc[:,"Asia"]


# In[128]: Using .loc operator - select a single row using integer based index


df_loc1.loc[2, :]


# In[129]: Using .loc operator - select a single row using row label


df_loc2.loc["2012", :]


# Using .loc operator - select a range of columns using column labels


df_loc1.loc[:,"Europe":"Americas"]


# In[161]: Using .loc operator - selecting rows based on Boolean array


df_loc2.loc[df_loc2["Asia"] > 11, :]


# Using .iloc operator - providing a single row index and column index to select data


df_loc1.iloc[3, 2]


# Using .iloc operator - providing a list of indices 


df_loc1.iloc[[1, 4], [0, 2, 3]]


# Using .iloc operator - range slicing


df_loc2.iloc[3:,:3]


# Using .iloc operator - boolean array for slicing


df_loc2.iloc[(df_loc2["Asia"] > 11).values, :]


# Use of .at operator


df_loc2.at["2012", "Americas"]


# Use of .iat operator


df_loc1.iat[2, 3]


# Benchmarking .iat operator


%timeit df_loc1.iat[2, 3]


# Benchmarking .iloc operator


%timeit df_loc1.iloc[2, 3]


# Mixed indexing with .ix - deprecated


df_loc2.ix["2012":"2014", 0:2]

