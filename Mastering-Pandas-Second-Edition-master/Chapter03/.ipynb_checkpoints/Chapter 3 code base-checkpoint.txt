array_list = [[100, 65, 160],
[150, 82, 200],
[90, 55, 80],
[130, 73, 220],
[190, 80, 150]]

array_list[1][2]

array_list[3][0]

import array as arr
arr_x = arr.array("d", [98.6, 22.35, 72.1])

ndarray_1
ndarray_1.dtype
ndarray_1.shape
ndarray_1.ndim
ndarray_1.size
ndarray_1.itemsize
ndarray_1.nbytes
ndarray_1.strides

array1d = np.array([1, 2, 3, 4])
array2d = np.array([[0, 1, 2],[2, 3, 4]])

np.ones((2, 3, 4))
np.zeros((2, 1, 3))
np.identity(3)
np.eye(N = 3)
np.eye(N = 2, M = 3)
np.eye(N = 4, M = 3, k = 1)
np.eye(N = 4, M = 3, k = -2)

np.arange(6)
np.arange(2, 13, 3)
np.linspace(start = 5, stop = 10, num = 20)

np.random.rand(2, 4)
np.random.randn(2, 4)
5 * np.random.randn(2, 4) + 10
np.random.randint(2, 5, (2, 3))
np.empty([4,3])
arr_a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
np.diag(arr_a)
np.diag(np.diag(arr_a))
np.diag(np.diag(arr_a, k = 1))

np.tile(np.array([1, 2, 3]), 2)
np.tile(np.array([[1, 2, 3], [4, 5, 6]]), 4)
np.tile(np.array([[1, 2, 3], [4, 5, 6]]), (4,1))
np.array([-2, -1, 0, 1, 2]).dtype
np.array([-2, -1, 0, 1, 2], dtype = "float")
np.array([-2, -1, 0, 1, 2], dtype = "str")
np.array(["a", "bb", "ccc", "dddd", "eeeee"])
np.array([True, False, True, True]).dtype
np.array([0, 1, 1, 0, 0], dtype = "bool")
np.array([0, 1, 2, 3, -4], dtype = "bool")
np.array([[1 + 1j, 2 + 2j], [3 + 3j, 4 + 4j]])
np.array([[1 + 1j, 2 + 2j], [3 + 3j, 4 + 4j]]).dtype

int_array = np.array([0, 1, 2, 3])
int_array.astype("float")
float_array = np.array([1.56, 2.95, 3.12, 4.65])
float_array.astype("int")

ar = np.arange(5); print ar; ar[0], ar[1], ar[-1]
ar=np.arange(5); ar[1], ar[-1], ar[0]
ar=np.arange(5); ar[::-1]
ar = np.array([[2,3,4],[9,8,7],[11,12,13]])
ar[1,1]
ar[1,1]=5
ar[2]
ar[:,1]
ar = np.array([0,1,2])
ar=2*np.arange(6)
ar[1:6:2]
ar[:4]
ar[4:]
ar[::3]
ar
ar[:3]=1; ar
ar[2:]=np.ones(4)

np.random.seed(10)
ar=np.random.random_integers(0,25,10
evenMask=(ar % 2==0); evenMask
evenNums=ar[evenMask]; evenNums
ar=np.array(['Hungary','Nigeria', 'Guatemala','','Poland','','Japan']); ar
ar[ar=='']='USA'; ar
ar=11*np.arange(0,10); ar
ar[[1,3,4,2,7]]
ar[[1,3]]=50; ar
ar=np.arange(15); ar
ar2=np.arange(0,-10,-1)[::-1]; ar2
ar[:10]=ar2; ar

ar1=np.arange(12); ar1
ar2=ar1[::2]; ar2
ar2[1]=-1; ar1
ar=np.arange(8);ar
arc=ar[:3].copy(); arc
arc[0]=-1; arc
array_1 = np.array([[1, 2, 3], [4, 5, 6]])
array_1 + 5
array_1 * 5
array_1 ** 2

array_1 + array_1
array_1 * array_1
array_1 @ array_1.T

%timeit np.arange(1000) ** 3
array_list = range(1000)
%timeit [array_list[i]**3 for i in array_list]

np.array([[1, 2, 3], [4, 5, 6]]).sum()
np.array([[1, 2, 3], [4, 5, 6]]).sum(axis = 0)
np.array([[1, 2, 3], [4, 5, 6]]).cumsum(axis = 0)
np.array([[1, 2, 3], [4, 5, 6]]).cumsum()
array_x = np.array([[0, 1, 2], [3, 4, 5]])
np.mean(array_x)
np.median(array_x)
np.var(array_x)
np.std(array_x)
np.mean(array_x, axis = 0)
np.mean(array_x, axis = 1)

nan_array = np.array([[5, 6, np.nan], [19, 3, 2]])
np.median(nan_array)
np.nanmedian(nan_array)

array_corr = np.random.randn(3,4)
array_corr
np.corrcoef(array_corr)
np.cov(array_corr)
array_logical = np.random.randn(3, 4)
np.any(array_logical < 0, axis = 0)
np.all(array_logical < 0)
np.isfinite(np.array([12, np.inf, 3, np.nan]))
np.isnan((np.array([12, np.inf, 3, np.nan])))
np.isinf((np.array([12, np.inf, 3, np.nan])))

array1 = np.random.randn(3,4)
array2 = np.random.randn(3, 4)
np.greater(array1, array2)
np.less(array1, array2)

ar=np.ones([3,2]); ar
ar2=np.array([2,3]); ar2
ar+ar2
ar=np.array([[23,24,25]]); ar
ar.T
ar.T+ar

reshape_array = np.arange(0,15)
np.reshape(reshape_array, (5, 3))
trans_array = np.arange(0,24).reshape(4, 6)
trans_array.T
trans_array = np.arange(0,24).reshape(2, 3, 4)
trans_array.T.shape

ravel_array = np.arange(0,12).reshape(4, 3)
ravel_array.ravel()
ravel_array.ravel(order = "F")

array_x = np.array([0, 1, 2, 3, 4, 5, 6])
array_x[:, np.newaxis]
array_x[:, np.newaxis].shape
array_x[:, np.newaxis, np.newaxis]
array_x[:, np.newaxis, np.newaxis].shape

array_1 = np.random.randn(2, 4)
array_2 = np.random.randn(4, 2)
np.dot(array_1, array_2)

array_1 = np.random.randn(2, 4, 2)
array_2 = np.random.randn(1, 1, 2, 1)
np.dot(array_1, array_2).shape

array_svd = np.random.randn(4, 3)
np.linalg.svd(array_svd)
np.linalg.eig(np.random.randn(5, 5))

a = np.array([[1, 2, 3], [5, 4, 2], [8, 9, 7]])
b = np.array([6, 19, 47])
np.linalg.solve(a, b)

np.linalg.det(np.random.randn(3,3))
np.linalg.det(np.random.randn(2,3,3))

ar=np.array([[3,2],[10,-1]])
ar.sort(axis=1)
ar=np.array([[3,2],[10,-1]])
ar.sort(axis=0)


N = 1000
X1 = np.random.randn(N, 2) + np.array([0.9, 0.9])
X2 = np.random.randn(N, 2) + np.array([-0.9, -0.9])
Y1 = np.zeros((N, 1))
Y2 = np.ones((N, 1))
X = np.vstack((X1, X2))
Y = np.vstack((Y1, Y2))
train = np.hstack((X, Y))
x = train[:, 0:2]
t = train[:, 2].reshape(2000, 1)
def sigmoid(x, derive = False):
if (derive == True):
    return x * (1 - x)
    return 1 / (1 + np.exp(-x))	
x_in = np.concatenate([x, np.repeat([[1]], 2000, axis = 0)], axis = 1)
w_ih = np.random.normal(size = (3, 3))
y_h = np.dot(x_in, w_ih)
a_h = sigmoid(y_h)
a_hin = np.concatenate([a_h, np.repeat([[1]], 2000, axis = 0)], axis = 1)
w_ho = np.random.normal(size = (4, 1)
y_o = np.dot(a_hin, w_ho)
a_o = sigmoid(y_o)
delta_a_o_error = a_o - t
delta_y_o = sigmoid(a_o, derive=True)
delta_w_ho = a_hin
delta_output_layer = np.dot(delta_w_ho.T,(delta_a_o_error * delta_y_o))

# Hidden layer
delta_a_h = np.dot(delta_a_o_error * delta_y_o, w_ho[0:3,:].T)
delta_y_h = sigmoid(a_h, derive=True)
delta_w_ih = x_in
delta_hidden_layer = np.dot(delta_w_ih.T, delta_a_h * delta_y_h)
eta = 0.1
w_ih = w_ih - eta * delta_hidden_layer
w_ho = w_ho - eta * delta_output_layer
x = train[:,0:2]
t = train[:,2].reshape(2000,1)
x_in = np.concatenate([x, np.repeat([[1]], 2000, axis = 0)], axis = 1)
w_ih = np.random.normal(size = (3, 3))
w_ho = np.random.normal(size = (4, 1))
def sigmoid(x, derive = False):
if (derive == True):
return x * (1 - x)
return 1 / (1 + np.exp(-x))
epochs = 5000
eta = 0.1
for epoch in range(epochs):
# Feed forward
    y_h = np.dot(x_in, w_ih)
    a_h = sigmoid(y_h)
    a_hin = np.concatenate([a_h, np.repeat([[1]], 2000, axis = 0)],     axis = 1)
    y_o = np.dot(a_hin, w_ho)
    a_o = sigmoid(y_o)

    # Calculate the error
    a_o_error = ((1 / 2) * (np.power((a_o - t), 2)))

    # Backpropagation
    ## Output layer
    delta_a_o_error = a_o - t
    delta_y_o = sigmoid(a_o, derive=True)
    delta_w_ho = a_hin
    delta_output_layer = np.dot(delta_w_ho.T,(delta_a_o_error * delta_y_o))

    ## Hidden layer
    delta_a_h = np.dot(delta_a_o_error * delta_y_o, w_ho[0:3,:].T)
    delta_y_h = sigmoid(a_h, derive=True)
    delta_w_ih = x_in
    delta_hidden_layer = np.dot(delta_w_ih.T, delta_a_h * delta_y_h)
    w_ih = w_ih - eta * delta_hidden_layer
    w_ho = w_ho - eta * delta_output_layer
    print(a_o_error.mean())


import cv2
import matplotlib.pyplot as plt
import os
os.chdir('')
img=cv2.imread('view.jpg')
img2=cv2.imread('rose.jpg')

print(type(img))
img.shape
plt.imshow(img)
img_r=img[:,:,0]
plt.imshow(img_r) 
img_g=img[:,:,1]
plt.imshow(img_g)
img_b=img[:,:,2]
plt.imshow(img_b)
img_tree=img[50:155,95:190,:]
plt.imshow(img_tree)
img3=img
img3[50:155,1:96,:]=img_tree
plt.imshow(img3) 
fig, axes = plt.subplots(1, 3)

# Red Channel
imgR = img.copy()
imgR[:, :, 1:3] = 0 # Assigning Green and Blue channel pixels to 0
axes[0].imshow(imgR)

# Green Channel
imgG = img.copy()
imgG[:, :, [0,2]] = 0 # Assigning Red and Blue channel pixels to 0
axes[1].imshow(imgG)

# Blue Channel
imgB = img.copy()
imgB[:, :, 0:2] = 0 0 # Assigning Red and Green channel pixels to 0
axes[2].imshow(imgB)


ser = pd.Series(data, index = idx)
ser = pd.Series(np.random.randn(7))
import calendar as cal
monthNames=[cal.month_name[i] for i in np.arange(1,6)]
months = pd.Series(np.arange(1,6), index = monthNames)
months.index
currDict={'US' : 'dollar', 'UK' : 'pound', 'Germany': 'euro', 'Mexico':'peso', 'Nigeria':'naira', 'China':'yuan', 'Japan':'yen'}
currSeries = pd.Series(currDict)
stockPrices = {'GOOG':1180.97, 'FB':62.57, 'TWTR': 64.50, 'AMZN':358.69, 'AAPL':500.6}
stockPriceSeries = pd.Series(stockPrices, index=['GOOG','FB','YHOO','TWTR','AMZN','AAPL'], name='stockPrices')
dogSeries=pd.Series('chihuahua', index=['breed', 'countryOfOrigin', 'name', 'gender'])

currDict['China']
stockPriceSeries['GOOG'] = 1200.0
stockPriceSeries['MSFT']
stockPriceSeries.get('MSFT, np.NaN)
stockPriceSeries[:4]
stockPriceSeries[stockPriceSeries > 100]
np.mean(stockPriceSeries)
np.std(stockPriceSeries)
ser
ser * ser
ser[1:]
ser[1:] + ser[:-2]


stockSummaries = {
'AMZN': pd.Series([346.15,0.59,459,0.52,589.8,158.88],
index=['Closing price','EPS',
'Shares Outstanding(M)',
'Beta', 'P/E','Market Cap(B)']),
'GOOG': pd.Series([1133.43,36.05,335.83,0.87,31.44,380.64],
index=['Closing price','EPS','Shares Outstanding(M)',
'Beta','P/E','Market Cap(B)']),
'FB': pd.Series([61.48,0.59,2450,104.93,150.92],
index=['Closing price','EPS','Shares Outstanding(M)',
'P/E', 'Market Cap(B)']),
'YHOO': pd.Series([34.90,1.27,1010,27.48,0.66,35.36],
index=['Closing price','EPS','Shares Outstanding(M)',
'P/E','Beta', 'Market Cap(B)']),
'TWTR':pd.Series([65.25,-0.3,555.2,36.23],
index=['Closing price','EPS','Shares Outstanding(M)',
'Market Cap(B)']),
'AAPL':pd.Series([501.53,40.32,892.45,12.44,447.59,0.84],
index=['Closing price','EPS','Shares Outstanding(M)','P/E',
'Market Cap(B)','Beta'])}

stockDF = pd.DataFrame(stockSummaries)

stockDF = pd.DataFrame(stockSummaries,
index=['Closing price','EPS',
'Shares Outstanding(M)',
'P/E', 'Market Cap(B)','Beta'],
columns=['FB','TWTR','SCNW'])

stockDF.index
stockDF.columns

algos = {'search': ['DFS','BFS','Binary Search',
'Linear','ShortestPath (Djikstra)'],
'sorting': ['Quicksort','Mergesort', 'Heapsort',
'Bubble Sort', 'Insertion Sort'],
'machine learning': ['RandomForest', 'K Nearest Neighbor',
'Logistic Regression', ''K-Means Clustering', 'Linear Regression']}
algoDF = pd.DataFrame(algos)
pd.DataFrame(algos,index=['algo_1','algo_2','algo_3','algo_4','algo_5'])

memberData = np.array([('Sanjeev',37,162.4),
('Yingluck',45,137.8),
('Emeka',28,153.2),
('Amy',67,101.3)],
dtype = [('Name','a15'),
('Age','i4'),
('Weight','f4')])
memberDF = pd.DataFrame(memberData)
pd.DataFrame(memberData, index=['a','b','c','d'])
pd.DataFrame(memberData, columns = ["Weight", "Name", "Age"])
demographicData = [{"Age": 32, "Gender": "Male"}, {"Race": "Hispanic", "Gender": "Female", "Age": 26}]
demographicDF = pd.DataFrame(demographicData)

salesData = {("2012", "Q1"): {("North", "Brand A"): 100, ("North", "Brand B"): 80, ("South", "Brand A"): 25, ("South", "Brand B"): 40},
("2012", "Q2"): {("North", "Brand A"): 30, ("South", "Brand B"): 50},
("2013", "Q1"): {("North", "Brand A"): 80, ("North", "Brand B"): 10, ("South", "Brand B"): 25},
("2013", "Q2"): {("North", "Brand A"): 70, ("North", "Brand B"): 50, ("South", "Brand A"): 35, ("South", "Brand B"): 40}}
salesDF = pd.DataFrame(salesData)

currDict={'US' : 'dollar', 'UK' : 'pound', 'Germany': 'euro', 'Mexico':'peso', 'Nigeria':'naira', 'China':'yuan', 'Japan':'yen'}
currSeries = pd.Series(currDict)
currDF = pd.DataFrame(currSeries)
pd.DataFrame.from_dict(algos, orient = "columns")
pd.DataFrame.from_dict(algos, orient = "index", columns = ["A", "B", "C", "D", "E"]) 
pd.DataFrame.from_records(memberData, index="Name")
memberDF["Name"]
memberDF['Height'] = 60
memberDF['Height2'] = [57, 62, 65, 59]
memberDF.insert(1, "ID", ["S01", "S02", "S03", "S04"])
del memberDF["Height"]
height2 = memberDF.pop("Height2")

ore1DF=pd.DataFrame(np.array([[20,35,25,20],
[11,28,32,29]]),
columns=['iron','magnesium',
'copper','silver'])
ore2DF=pd.DataFrame(np.array([[14,34,26,26],
[33,19,25,23]]),
columns=['iron','magnesium',
'gold','silver'])

ore1DF + ore2DF

ore1DF + pd.Series([25,25,25,25], index=['iron', 'magnesium', 'copper', 'silver'])
ore1DF["add_iron_copper"] = ore1DF["iron"] + ore1DF["copper"]

logical_df1 = pd.DataFrame({'Col1' : [1, 0, 1], 'Col2' : [0, 1, 1] }, dtype=bool)
logical_df2 = pd.DataFrame({'Col1' : [1, 0, 0], 'Col2' : [0, 0, 1] }, dtype=bool)
logical_df1 | logical_df2
np.sqrt(ore1DF)

stockData = np.array([[[63.03,61.48,75],
[62.05,62.75,46],
[62.74,62.19,53]],
[[411.90, 404.38, 2.9],
[405.45, 405.91, 2.6],
[403.15, 404.42, 2.4]]])

stockHistoricalPrices = pd.Panel(stockData,
items=['FB', 'NFLX'], major_axis=pd.date_range('2/3/2014', periods=3),
minor_axis=['open price', 'closing price', 'volume'])

USData = pd.DataFrame(np.array([[249.62 , 8900],
[ 282.16,12680],
[309.35,14940]]),
columns=['Population(M)','GDP($B)'],
index=[1990,2000,2010])
ChinaData = pd.DataFrame(np.array([[1133.68, 390.28],
[ 1266.83,1198.48],
[1339.72, 6988.47]]),
columns=['Population(M)','GDP($B)'],
index=[1990,2000,2010])

US_ChinaData={'US' : USData, 'China': ChinaData}
pd.Panel(US_ChinaData)

mIdx = pd.MultiIndex(levels = [['US', 'China'], [1990,2000, 2010]], labels=[[1,1,1,0,0,0],[0,1,2,0,1,2]])
ChinaUSDF = pd.DataFrame({'Population(M)' : [1133.68, 1266.83, 1339.72, 249.62, 282.16, 309.35], GDB($B)': [390.28, 1198.48, 6988.47, 8900, 12680,14940]}, index=mIdx)
ChinaUSDF.to_panel()





